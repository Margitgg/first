from config import token
import discord
from discord import Message, Option, Member, User
from discord.commands.context import ApplicationContext as c
import datetime
import asyncio

bot = discord.Bot(intents=discord.Intents.all())
bad_words = ["–¥—É—Ä–∞–∫", "–ª–æ—Ö", "–±–∞–ª–±–µ—Å"]
good_words = ["–±–ª–æ—Ö–∞", "–æ–≥–ª–æ—Ö"]
reps = {}


@bot.event
async def on_ready():
    print("–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")


@bot.event
async def on_message(m: Message):
    global reps
    clean_msg = "".join(letter.lower() for letter in m.content if letter.isalpha())
    bad_word = False
    for word in bad_words:
        if word in clean_msg:
            bad_word = True
            break
    good_word = False
    for word in good_words:
        if word in clean_msg:
            good_word = True
            break
    if m.author.bot:
        return
    if m.author.id not in reps:
        reps[m.author.id] = 0
    if m.reference:
        ref_author = bot.get_message(m.reference.message_id).author.id
        name_author = bot.get_message(m.reference.message_id).author
        if m.content == "+++":
            reps[ref_author] += 1
            await m.channel.send(
                f"{m.author.name} –ø–æ–≤—ã—Å–∏–ª —Ä–µ–ø—É—Ç–∞—Ü–∏—é {name_author}! –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {reps[ref_author]}")
            if reps[ref_author] > 5:
                Moderator = discord.utils.get(name_author.guild.roles, name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
                await name_author.add_roles(Moderator)
    elif m.content == "–ø—Ä–∏–≤–µ—Ç":
        await m.channel.send("–ø—Ä–∏–≤–µ—Ç —è –±–æ—Ç")
    elif "–∫—É" in m.content:
        await m.reply("–∫—É –∫—É")
    elif m.content == "–±–æ—Ç –≥–æ –≤ –ª—Å":
        await m.author.send("—è –∑–¥–µ—Å—å")
    elif bad_word is True and good_word is not True:
        await m.delete()


@bot.event
async def on_member_join(mem: Member):
    channels = mem.guild.channels
    for channel in channels:
        if channel.name == "–æ—Å–Ω–æ–≤–Ω–æ–π":
            await channel.send(f"–∫ –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è {mem.mention}")
        if channel.name == "spam":
            await channel.send(f"–∑–∞—à—ë–ª {mem.name}")


@bot.event
async def on_member_remove(mem: Member):
    channels = mem.guild.channels
    for channel in channels:
        if channel.name == "–æ—Å–Ω–æ–≤–Ω–æ–π":
            await channel.send(f"–æ—Ç –Ω–∞—Å —É—à—ë–ª {mem.name}")
        if channel.name == "spam":
            await channel.send(f"–≤—ã—à–µ–ª {mem.name}")


@bot.event
async def on_member_update(old: Member, new: Member):
    channel = None
    channels = new.guild.channels
    for ch in channels:
        if ch.name == "spam":
            channel = ch
    if old.nick != new.nick:
        await channel.send(
            f"{old.name if not old.nick else old.nick} —Ç–µ–ø–µ—Ä—å {'–±–µ–∑ –Ω–∏–∫–∞' if not new.nick else new.nick}")
    if old.roles != new.roles:
        await channel.send(f"{new.name} –ø–æ–º–µ–Ω—è–ª —Ä–æ–ª—å")


@bot.event
async def on_user_update(old: User, new: User):
    channel = None
    channels = None
    members = bot.get_all_members()
    for mem in members:
        if new.name == mem.name:
            channels = mem.guild.channels
    for ch in channels:
        if ch.name == "spam":
            channel = ch
    if old.avatar != new.avatar:
        await channel.send(f"–£ {new.name} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∞–≤–∞—Ç–∞—Ä–∫–∞")
        await channel.send(new.avatar.url)
        msg = await channel.history(limit=1).flatten()
        await msg[0].add_reaction("üòï")


@bot.slash_command(description="–≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ")
async def msc_time(ctx: c):
    msc = datetime.timezone(datetime.timedelta(hours=3))
    data = datetime.datetime.now(msc)
    await ctx.respond(f"—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ: {data.strftime('%H:%M:%S')}")


@bot.slash_command(description="–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
async def clean(ctx: c, messages_for_delete: Option(int) = 10):
    await ctx.channel.purge(limit=messages_for_delete)
    await ctx.respond("–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ")
    await ctx.delete()


@bot.slash_command(description="–≤—Ä–µ–º—è –≤ –ê—Ä–≥–µ–Ω—Ç–∏–Ω–µ")
async def arg_time(ctx: c):
    arg = datetime.timezone(datetime.timedelta(hours=-3))
    data = datetime.datetime.now(arg)
    await ctx.respond(f"—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ê—Ä–≥–µ–Ω—Ç–∏–Ω–µ: {data.strftime('%H:%M:%S')}")


@bot.slash_command(description="—É—Ä–∞–≤–Ω–µ–Ω–∏–µ")
async def urav(ctx: c, x: Option(int), y: Option(int)):
    result = x ** 2 + y
    await ctx.respond(f'{x} ** 2 + {y} = {result}')


@bot.user_command(name="–¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
async def reg(ctx: c, member: Member):
    await ctx.respond(f"{member.mention} —Å–æ–∑–¥–∞–ª –∞–∫–∫–∞—É–Ω—Ç {member.created_at}")


@bot.message_command(name="–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏")
async def plus_rep(ctx: c, m: Message):
    await ctx.respond(f"–º–æ—ë —É–≤–∞–∂–µ–Ω–∏–µ {m.author.mention}")


@bot.message_command(name="–Ω–µ—É–≤–∞–∂–µ–Ω–∏–µ")
async def minus_rep(ctx: c, m: Message):
    await ctx.respond(f"–¥–∏–∑ {m.author.mention}")
    await ctx.delete(delay=2)
    await m.add_reaction("üëéüèø")


@bot.message_command(name="–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤.—Å–µ—Ä–≤")
async def minus_rep(ctx: c, m: Message):
    await ctx.respond(f"—ç—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤ —Å–µ—Ä–≤–µ—Ä–∞, 1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –±–æ–ª—å—à–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç{m.author.mention}")
    await ctx.delete(delay=25)
    await m.add_reaction("üò°")


@bot.slash_command(description="—Ç–∞–π–º–µ—Ä")
async def timer(ctx: c, sec: Option(int)):
    await ctx.respond(f"{ctx.author.mention} —Ç–≤–æ–π —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    await asyncio.sleep(sec)
    await ctx.channel.send(f"{ctx.author.mention} —Ç–≤–æ–∏ {sec} —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–∏")


bot.run(token)
